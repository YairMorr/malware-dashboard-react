import React, { Component } from "react";
import "../../graph.css";

// array of dates, for formatting the date property of each chart column
const months = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec"
];

class XAxis extends Component {
  state = {
    width: 0
  };

  componentDidMount = () => {
    this.updateWidth();
    window.addEventListener("resize", this.updateWidth);
  };

  componentWillUnmount = () => {
    window.removeEventListener("resize", this.updateDimensions);
  };

  updateWidth = () => {
    const chart = document.getElementById(this.props.chart.id);
    if (chart) {
      const width = document.getElementById(this.props.chart.id).offsetWidth;
      this.setState({ width });
    }
  };

  // Renders date in "Mon. day" format
  renderDate = date => {
    if (date) {
      var [day, month] = date.split("/");
      return `${months[Number(month)]}. ${day}`;
    }
  };

  renderName = name => {
    const maxChar = 12;
    if (this.state.width < 50 && name.length > maxChar) {
      return "..." + name.substring(0, maxChar);
    }
    return name;
  };

  render() {
    const { chart, index, renderFactor, textRotation } = this.props;
    const { width } = this.state;
    let textStyle = {};
    let containerStyle = {};

    // Setting up some styles to correctly position rotated text
    if (textRotation) {
      textStyle.width = width;
      textStyle.transform = `translateX(-${width / 2}px) rotate(-45deg)`;
    } else {
      containerStyle.marginLeft = `calc(-25px + ${this.state.width / 2}px)`;
    }

    return (
      // Check if chart contains a name property. If not, render the expression every nth times (based on renderFactor)
      (chart.name || index % renderFactor === 0) && (
        <div className="x-axis-container" style={containerStyle}>
          <div
            style={textStyle}
            id={chart.date || chart.name}
            className={chart.date ? "date" : "name"}
          >
            {this.renderDate(chart.date) || this.renderName(chart.name)}
          </div>
        </div>
      )
    );
  }
}

export default XAxis;
